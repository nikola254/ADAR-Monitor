#!/usr/bin/env python3
"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
from datetime import datetime

class MonitorWindow:
    def __init__(self, security_monitor):
        self.security_monitor = security_monitor
        self.root = tk.Tk()
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root.title("Security Monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        self.root.geometry("800x600")
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI
        self.update_gui()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(2, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        status_frame = ttk.LabelFrame(main_frame, text="–°—Ç–∞—Ç—É—Å", padding="5")
        status_frame.grid(row=1, column=0, columnspan=2, sticky=(tk.W, tk.E), pady=(0, 10))
        status_frame.columnconfigure(1, weight=1)
        
        ttk.Label(status_frame, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ:").grid(row=0, column=0, sticky=tk.W)
        self.status_label = ttk.Label(status_frame, text="–ó–∞–ø—É—â–µ–Ω", foreground="green")
        self.status_label.grid(row=0, column=1, sticky=tk.W)
        
        ttk.Label(status_frame, text="–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:").grid(row=1, column=0, sticky=tk.W)
        self.uptime_label = ttk.Label(status_frame, text="00:00:00")
        self.uptime_label.grid(row=1, column=1, sticky=tk.W)
        
        ttk.Label(status_frame, text="–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑:").grid(row=2, column=0, sticky=tk.W)
        self.threats_label = ttk.Label(status_frame, text="0", foreground="red")
        self.threats_label.grid(row=2, column=1, sticky=tk.W)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        notebook = ttk.Notebook(main_frame)
        notebook.grid(row=2, column=0, columnspan=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –í–∫–ª–∞–¥–∫–∞ "–ê–ª–µ—Ä—Ç—ã"
        alerts_frame = ttk.Frame(notebook)
        notebook.add(alerts_frame, text="–ê–ª–µ—Ä—Ç—ã")
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.alerts_text = scrolledtext.ScrolledText(alerts_frame, height=15, width=70)
        self.alerts_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        sysinfo_frame = ttk.Frame(notebook)
        notebook.add(sysinfo_frame, text="–°–∏—Å—Ç–µ–º–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        self.sysinfo_text = scrolledtext.ScrolledText(sysinfo_frame, height=15, width=70)
        self.sysinfo_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ—Ü–µ—Å—Å—ã"
        processes_frame = ttk.Frame(notebook)
        notebook.add(processes_frame, text="–ü—Ä–æ—Ü–µ—Å—Å—ã")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.processes_text = scrolledtext.ScrolledText(processes_frame, height=15, width=70)
        self.processes_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        testing_frame = ttk.Frame(notebook)
        notebook.add(testing_frame, text="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        testing_text = scrolledtext.ScrolledText(testing_frame, height=15, width=70, wrap=tk.WORD)
        testing_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
        testing_instructions = """=== –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ ADAR-Monitor ===

üîç –ö–ê–ö –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –û–¢–õ–ê–î–ß–ò–ö–û–í:

1. –¢–µ—Å—Ç —Å GDB (GNU Debugger):
   sudo apt install gdb
   gdb /usr/bin/python3
   (gdb) run /path/to/your/main.py --gui
   ‚Üí –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∞–ª–µ—Ä—Ç—ã "DEBUGGER" —Å —É—Ä–æ–≤–Ω–µ–º –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô

2. –¢–µ—Å—Ç —Å Strace (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã):
   sudo apt install strace
   strace -p $(pgrep -f "python.*main.py")
   ‚Üí –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∞–ª–µ—Ä—Ç—ã "PROCESS" –¥–ª—è strace

3. –¢–µ—Å—Ç —Å ltrace (–±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–µ –≤—ã–∑–æ–≤—ã):
   sudo apt install ltrace
   ltrace python3 main.py --console
   ‚Üí –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∞–ª–µ—Ä—Ç—ã "PROCESS" –¥–ª—è ltrace

üîç –ö–ê–ö –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–¶–ï–°–°–û–í:

1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞:
   sudo apt install radare2 hexedit ghex
   
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ª—é–±–æ–π –∏–∑ –Ω–∏—Ö:
   radare2 /bin/ls
   ‚Üí –î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –∞–ª–µ—Ä—Ç "PROCESS" —Å —É—Ä–æ–≤–Ω–µ–º –í–´–°–û–ö–ò–ô

3. –î—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
   - objdump -d /bin/ls
   - hexdump -C /bin/ls
   - strings /bin/ls

üîç –ö–ê–ö –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–¢–¨ –°–ò–°–¢–ï–ú–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì:

1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:
   sudo touch /sys/kernel/debug/test_file
   sudo rm /sys/kernel/debug/test_file
   ‚Üí –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∞–ª–µ—Ä—Ç—ã "SYSTEM" —Å —É—Ä–æ–≤–Ω–µ–º –°–†–ï–î–ù–ò–ô

2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
   sudo logger "Test security event"
   ‚Üí –ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∞–ª–µ—Ä—Ç "SYSTEM"

üîç –ë–ï–ó–û–ü–ê–°–ù–´–ï VS –û–ü–ê–°–ù–´–ï –ü–†–û–¶–ï–°–°–´:

‚úÖ –ë–ï–ó–û–ü–ê–°–ù–´–ï (–æ–±—ã—á–Ω–æ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è):
   - polkitd - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ Ubuntu
   - systemd - —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
   - dbus - –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
   - NetworkManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—å—é

‚ùå –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û –û–ü–ê–°–ù–´–ï:
   - gdb, lldb - –æ—Ç–ª–∞–¥—á–∏–∫–∏
   - strace, ltrace - —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫–∏
   - radare2, ghidra - –¥–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä—ã
   - wireshark - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
   - metasploit - —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ

üîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ GUI —Ä–µ–∂–∏–º–µ:
   python3 main.py --gui

2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "–ê–ª–µ—Ä—Ç—ã" –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

3. –í –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã

4. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –∞–ª–µ—Ä—Ç–æ–≤ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏

5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫–∏ "–°–∏—Å—Ç–µ–º–∞" –∏ "–ü—Ä–æ—Ü–µ—Å—Å—ã" –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

‚ö†Ô∏è –í–ê–ñ–ù–û: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≤–∑–ª–æ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ä–µ–¥–µ!"""
        
        testing_text.insert(1.0, testing_instructions)
        testing_text.config(state=tk.DISABLED)  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = ttk.Frame(main_frame)
        buttons_frame.grid(row=3, column=0, columnspan=2, pady=(10, 0))
        
        self.pause_button = ttk.Button(buttons_frame, text="–ü–∞—É–∑–∞", command=self.toggle_monitoring)
        self.pause_button.pack(side=tk.LEFT, padx=(0, 5))
        
        ttk.Button(buttons_frame, text="–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç", command=self.save_report).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(buttons_frame, text="–í—ã—Ö–æ–¥", command=self.on_closing).pack(side=tk.RIGHT)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.start_time = time.time()
        self.threat_count = 0
        self.monitoring_paused = False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_alert("INFO", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    def add_alert(self, alert_type, message, timestamp):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        if not self.running:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏ —É—Ä–æ–≤–Ω—è –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø—É –∞–ª–µ—Ä—Ç–∞
        alert_info = {
            "DEBUGGER": {
                "color": "red",
                "level": "–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô",
                "description": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞",
                "recommendation": "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –ü–û"
            },
            "PROCESS": {
                "color": "orange",
                "level": "–í–´–°–û–ö–ò–ô",
                "description": "–ù–∞–π–¥–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º"
            },
            "SYSTEM": {
                "color": "blue",
                "level": "–°–†–ï–î–ù–ò–ô",
                "description": "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∂—É—Ä–Ω–∞–ª—ã —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
            },
            "INFO": {
                "color": "green",
                "level": "–ò–ù–§–û–†–ú–ê–¶–ò–Ø",
                "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "recommendation": "–î–µ–π—Å—Ç–≤–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
            },
            "WARNING": {
                "color": "orange",
                "level": "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï",
                "description": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞"
            },
            "ERROR": {
                "color": "red",
                "level": "–û–®–ò–ë–ö–ê",
                "description": "–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
                "recommendation": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            }
        }
        
        info = alert_info.get(alert_type, {
            "color": "black",
            "level": "–ù–ï–ò–ó–í–ï–°–¢–ù–û",
            "description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è",
            "recommendation": "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
        })
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏
        if alert_type in ["DEBUGGER", "PROCESS", "SYSTEM", "WARNING", "ERROR"]:
            formatted_message = f"[{timestamp}] [{alert_type}] {message}\n"
            formatted_message += f"    ‚îú‚îÄ –£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {info['level']}\n"
            formatted_message += f"    ‚îú‚îÄ –û–ø–∏—Å–∞–Ω–∏–µ: {info['description']}\n"
            formatted_message += f"    ‚îî‚îÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {info['recommendation']}\n\n"
        else:
            formatted_message = f"[{timestamp}] [{alert_type}] {message}\n"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.alerts_text.insert(tk.END, formatted_message)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –±–ª–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if alert_type in ["DEBUGGER", "PROCESS", "SYSTEM", "WARNING", "ERROR"]:
            # –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ (–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –ø–æ—è—Å–Ω–µ–Ω–∏—è)
            lines_count = 4  # –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ + 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π + –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            for i in range(lines_count):
                line_start = self.alerts_text.index(f"end-{lines_count-i+1}c linestart")
                line_end = self.alerts_text.index(f"end-{lines_count-i}c")
                
                tag_name = f"alert_{alert_type}_{time.time()}_{i}"
                self.alerts_text.tag_add(tag_name, line_start, line_end)
                
                if i == 0:  # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                    self.alerts_text.tag_config(tag_name, foreground=info['color'], font=('Arial', 9, 'bold'))
                else:  # –°—Ç—Ä–æ–∫–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π
                    self.alerts_text.tag_config(tag_name, foreground='gray', font=('Arial', 8))
        else:
            # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è INFO
            line_start = self.alerts_text.index("end-2c linestart")
            line_end = self.alerts_text.index("end-1c")
            
            tag_name = f"alert_{alert_type}_{time.time()}"
            self.alerts_text.tag_add(tag_name, line_start, line_end)
            self.alerts_text.tag_config(tag_name, foreground=info['color'])
        
        # –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞
        self.alerts_text.see(tk.END)
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —É–≥—Ä–æ–∑
        if alert_type in ["DEBUGGER", "PROCESS", "SYSTEM"]:
            self.threat_count += 1
            self.threats_label.config(text=str(self.threat_count))
    
    def update_gui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É"""
        if not self.running:
            return
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        uptime = time.time() - self.start_time
        hours = int(uptime // 3600)
        minutes = int((uptime % 3600) // 60)
        seconds = int(uptime % 60)
        self.uptime_label.config(text=f"{hours:02d}:{minutes:02d}:{seconds:02d}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.update_system_info()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        self.update_processes_info()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.root.after(1000, self.update_gui)
    
    def update_system_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            if hasattr(self.security_monitor, 'system_monitor'):
                info = self.security_monitor.system_monitor.get_system_info()
                
                info_text = "=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n\n"
                info_text += f"CPU: {info.get('cpu_percent', 'N/A')}%\n"
                info_text += f"–ü–∞–º—è—Ç—å: {info.get('memory_percent', 'N/A')}%\n"
                info_text += f"–î–∏—Å–∫: {info.get('disk_percent', 'N/A')}%\n"
                info_text += f"–ü—Ä–æ—Ü–µ—Å—Å—ã: {info.get('process_count', 'N/A')}\n"
                info_text += f"–°–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {info.get('network_connections', 'N/A')}\n"
                
                if 'boot_time' in info:
                    boot_time = datetime.fromtimestamp(info['boot_time'])
                    info_text += f"–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {boot_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                self.sysinfo_text.delete(1.0, tk.END)
                self.sysinfo_text.insert(1.0, info_text)
        
        except Exception as e:
            pass
    
    def update_processes_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"""
        try:
            if hasattr(self.security_monitor, 'process_monitor'):
                processes = self.security_monitor.process_monitor.get_all_suspicious_processes()
                
                processes_text = "=== –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–¶–ï–°–°–´ ===\n\n"
                
                # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                process_descriptions = {
                    'gdb': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –û—Ç–ª–∞–¥—á–∏–∫ GNU, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º',
                    'lldb': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –û—Ç–ª–∞–¥—á–∏–∫ LLVM, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤–∑–ª–æ–º–∞',
                    'strace': 'üü† –í–´–°–û–ö–ò–ô - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤',
                    'ltrace': 'üü† –í–´–°–û–ö–ò–ô - –¢—Ä–∞—Å—Å–∏—Ä–æ–≤—â–∏–∫ –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤',
                    'radare2': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ú–æ—â–Ω—ã–π –¥–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä –∏ –æ—Ç–ª–∞–¥—á–∏–∫',
                    'ghidra': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ NSA',
                    'ida': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞—Å—Å–µ–º–±–ª–µ—Ä IDA Pro',
                    'objdump': 'üü° –°–†–ï–î–ù–ò–ô - –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
                    'hexdump': 'üü° –°–†–ï–î–ù–ò–ô - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
                    'strings': 'üü° –°–†–ï–î–ù–ò–ô - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤',
                    'wireshark': 'üü† –í–´–°–û–ö–ò–ô - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞',
                    'tcpdump': 'üü† –í–´–°–û–ö–ò–ô - –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ —Å–µ—Ç–µ–≤—ã—Ö –ø–∞–∫–µ—Ç–æ–≤',
                    'metasploit': 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–µ',
                    'nmap': 'üü† –í–´–°–û–ö–ò–ô - –°–∫–∞–Ω–µ—Ä –ø–æ—Ä—Ç–æ–≤ –∏ —Å–µ—Ç–µ–≤–æ–π —Ä–∞–∑–≤–µ–¥–∫–∏',
                    'polkitd': 'üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ô - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è–º–∏ Ubuntu',
                    'systemd': 'üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ô - –°–∏—Å—Ç–µ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
                    'dbus': 'üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ô - –°–∏—Å—Ç–µ–º–∞ –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è',
                    'NetworkManager': 'üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ô - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'
                }
                
                if processes:
                    for i, process in enumerate(processes, 1):
                        process_name = process.split()[0] if process else 'unknown'
                        description = process_descriptions.get(process_name, 'üü° –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô - –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏')
                        
                        processes_text += f"{i}. {process}\n"
                        processes_text += f"   ‚îî‚îÄ {description}\n\n"
                else:
                    processes_text += "‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã\n\n"
                    processes_text += "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
                    processes_text += "–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, —Ä–µ–≤–µ—Ä—Å-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–∞ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\n"
                
                processes_text += "=== –õ–ï–ì–ï–ù–î–ê –£–†–û–í–ù–ï–ô –û–ü–ê–°–ù–û–°–¢–ò ===\n\n"
                processes_text += "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô - –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è\n"
                processes_text += "üü† –í–´–°–û–ö–ò–ô - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n"
                processes_text += "üü° –°–†–ï–î–ù–ò–ô - –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
                processes_text += "üü¢ –ë–ï–ó–û–ü–ê–°–ù–´–ô - –û–±—ã—á–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                self.processes_text.delete(1.0, tk.END)
                self.processes_text.insert(1.0, processes_text)
        
        except Exception as e:
            pass
    
    def toggle_monitoring(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring_paused = not self.monitoring_paused
        
        if self.monitoring_paused:
            self.pause_button.config(text="–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
            self.status_label.config(text="–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", foreground="orange")
            self.security_monitor.running = False
        else:
            self.pause_button.config(text="–ü–∞—É–∑–∞")
            self.status_label.config(text="–ó–∞–ø—É—â–µ–Ω", foreground="green")
            self.security_monitor.running = True
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitor_thread = threading.Thread(target=self.security_monitor._monitoring_loop, daemon=True)
            monitor_thread.start()
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.alerts_text.delete(1.0, tk.END)
        self.threat_count = 0
        self.threats_label.config(text="0")
        self.add_alert("INFO", "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞"""
        try:
            from tkinter import filedialog
            
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("=== –û–¢–ß–Å–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===\n\n")
                    f.write(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {self.threat_count}\n\n")
                    f.write("=== –ê–õ–ï–†–¢–´ ===\n")
                    f.write(self.alerts_text.get(1.0, tk.END))
                    f.write("\n=== –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===\n")
                    f.write(self.sysinfo_text.get(1.0, tk.END))
                    f.write("\n=== –ü–†–û–¶–ï–°–°–´ ===\n")
                    f.write(self.processes_text.get(1.0, tk.END))
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç: {e}")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
            self.running = False
            self.security_monitor.running = False
            self.root.destroy()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.running = False
        if self.root:
            self.root.quit()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            self.root.mainloop()
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ GUI: {e}")